diff --git a/src/AppBundle/Controller/Api/ProgrammerController.php b/src/AppBundle/Controller/Api/ProgrammerController.php
index 6b9f856..7dbae23 100644
--- a/src/AppBundle/Controller/Api/ProgrammerController.php
+++ b/src/AppBundle/Controller/Api/ProgrammerController.php
@@ -13,6 +13,7 @@ use Symfony\Component\Form\FormInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\HttpKernel\Exception\HttpException;
 
 class ProgrammerController extends BaseController
 {
@@ -144,6 +145,10 @@ class ProgrammerController extends BaseController
     private function handleRequest(Request $request, Programmer $programmer)
     {
         $data = json_decode($request->getContent(), true);
+        if ($data === null) {
+            throw new HttpException(400, 'Invalid JSON body!');
+        }
+
         $type = $programmer && $programmer->getId() ? new UpdateProgrammerType() : new ProgrammerType();
         $form = $this->createForm($type, $programmer);
         $clearMissing = $request->getMethod() != 'PATCH';
diff --git a/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php b/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php
index ae01e99..6a5d85d 100644
--- a/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php
+++ b/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php
@@ -143,4 +143,22 @@ class ProgrammerControllerTest extends ApiTestCase
         $this->assertResponsePropertyDoesNotExist($response, 'errors.avatarNumber');
         $this->assertEquals('application/problem+json', $response->getHeader('Content-Type'));
     }
+
+    public function testInvalidJson()
+    {
+        $invalidBody = <<<EOF
+{
+    "avatarNumber" : "2
+    "tagLine": "I'm from a test!"
+}
+EOF;
+
+        $response = $this->client->post('/api/programmers', [
+            'body' => $invalidBody
+        ]);
+        $this->debugResponse($response);
+
+        $this->assertEquals(400, $response->getStatusCode());
+    }
+
 }
