diff --git a/src/AppBundle/Controller/Api/ProgrammerController.php b/src/AppBundle/Controller/Api/ProgrammerController.php
index 3891d71..fd1b3e4 100644
--- a/src/AppBundle/Controller/Api/ProgrammerController.php
+++ b/src/AppBundle/Controller/Api/ProgrammerController.php
@@ -5,6 +5,7 @@ namespace AppBundle\Controller\Api;
 use AppBundle\Controller\BaseController;
 use AppBundle\Entity\Programmer;
 use AppBundle\Form\ProgrammerType;
+use AppBundle\Form\UpdateProgrammerType;
 use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
 use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
 use Symfony\Component\HttpFoundation\JsonResponse;
@@ -112,7 +113,8 @@ class ProgrammerController extends BaseController
     private function handleRequest(Request $request, Programmer $programmer)
     {
         $data = json_decode($request->getContent(), true);
-        $form = $this->createForm(new ProgrammerType(), $programmer);
+        $type = $programmer && $programmer->getId() ? new UpdateProgrammerType() : new ProgrammerType();
+        $form = $this->createForm($type, $programmer);
         $form->submit($data);
 
         /** @var Programmer $programmer */
diff --git a/src/AppBundle/Form/ProgrammerType.php b/src/AppBundle/Form/ProgrammerType.php
index 3b2b2a5..07362ce 100644
--- a/src/AppBundle/Form/ProgrammerType.php
+++ b/src/AppBundle/Form/ProgrammerType.php
@@ -11,7 +11,10 @@ class ProgrammerType extends AbstractType
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
         $builder
-            ->add('nickname', 'text')
+            ->add('nickname', 'text', [
+                // readonly if we're in edit mode
+                'disabled' => $options['is_edit']
+            ])
             ->add('avatarNumber', 'number')
             ->add('tagLine', 'textarea')
         ;
@@ -20,7 +23,8 @@ class ProgrammerType extends AbstractType
     public function setDefaultOptions(OptionsResolverInterface $resolver)
     {
         $resolver->setDefaults(array(
-            'data_class' => 'AppBundle\Entity\Programmer'
+            'data_class' => 'AppBundle\Entity\Programmer',
+            'is_edit' => false,
         ));
     }
 
diff --git a/src/AppBundle/Form/UpdateProgrammerType.php b/src/AppBundle/Form/UpdateProgrammerType.php
new file mode 100644
index 0000000..964a00e
--- /dev/null
+++ b/src/AppBundle/Form/UpdateProgrammerType.php
@@ -0,0 +1,23 @@
+<?php
+
+namespace AppBundle\Form;
+
+use Symfony\Component\Form\AbstractType;
+use Symfony\Component\Form\FormBuilderInterface;
+use Symfony\Component\OptionsResolver\OptionsResolverInterface;
+
+class UpdateProgrammerType extends ProgrammerType
+{
+    public function setDefaultOptions(OptionsResolverInterface $resolver)
+    {
+        parent::setDefaultOptions($resolver);
+
+        // override this!
+        $resolver->setDefaults(['is_edit' => true]);
+    }
+
+    public function getName()
+    {
+        return 'programmer_edit';
+    }
+}
\ No newline at end of file
diff --git a/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php b/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php
index b83a15e..44ce843 100644
--- a/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php
+++ b/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php
@@ -76,7 +76,7 @@ class ProgrammerControllerTest extends ApiTestCase
         ));
 
         $data = array(
-            'nickname' => 'CowboyCoder',
+            'nickname' => 'CowgirlCoder',
             'avatarNumber' => 2,
             'tagLine' => 'foo',
         );
@@ -85,5 +85,7 @@ class ProgrammerControllerTest extends ApiTestCase
         ]);
         $this->assertEquals(200, $response->getStatusCode());
         $this->assertResponsePropertyEquals($response, 'avatarNumber', 2);
+        // the nickname is immutable on edit
+        $this->assertResponsePropertyEquals($response, 'nickname', 'CowboyCoder');
     }
 }
