diff --git a/src/AppBundle/Tests/Controller/Api/ApiTestCase.php b/src/AppBundle/Tests/Controller/Api/ApiTestCase.php
index b03f476..c44d04d 100644
--- a/src/AppBundle/Tests/Controller/Api/ApiTestCase.php
+++ b/src/AppBundle/Tests/Controller/Api/ApiTestCase.php
@@ -16,6 +16,7 @@ use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
 use Symfony\Component\Console\Helper\FormatterHelper;
 use Symfony\Component\Console\Output\ConsoleOutput;
 use Symfony\Component\DomCrawler\Crawler;
+use Symfony\Component\PropertyAccess\Exception\RuntimeException;
 use Symfony\Component\PropertyAccess\Exception\AccessException;
 use Symfony\Component\PropertyAccess\PropertyAccess;
 use Symfony\Component\PropertyAccess\PropertyAccessor;
@@ -276,6 +277,25 @@ class ApiTestCase extends KernelTestCase
         }
     }
 
+    protected function assertResponsePropertyExists(ResponseInterface $response, $propertyPath)
+    {
+        // this will blow up if the property doesn't exist
+        $this->readResponseProperty($response, $propertyPath);
+    }
+
+    protected function assertResponsePropertyDoesNotExist(ResponseInterface $response, $propertyPath)
+    {
+        try {
+            // this will blow up if the property doesn't exist
+            $this->readResponseProperty($response, $propertyPath);
+
+            $this->fail(sprintf('Property "%s" exists, but it should not', $propertyPath));
+        } catch (RuntimeException $e) {
+            // cool, it blew up
+            // this catches all errors (but only errors) fro, the PropertyAccess component
+        }
+    }
+
     protected function assertResponsePropertyEquals(ResponseInterface $response, $propertyPath, $expectedValue)
     {
         $actual = $this->readResponseProperty($response, $propertyPath);
diff --git a/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php b/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php
index 59d79dd..27d7783 100644
--- a/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php
+++ b/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php
@@ -120,4 +120,27 @@ class ProgrammerControllerTest extends ApiTestCase
         $response = $this->client->delete('/api/programmers/UnitTester');
         $this->assertEquals(204, $response->getStatusCode());
     }
+
+    public function testValidationErrors()
+    {
+        $data = array(
+            'avatarNumber' => 2,
+            'tagLine' => 'I\'m from a test!'
+        );
+
+        // 1) Create a programmer resource
+        $response = $this->client->post('/api/programmers', [
+            'body' => json_encode($data)
+        ]);
+
+        $this->assertEquals(400, $response->getStatusCode());
+        $this->assertResponsePropertiesExist($response, array(
+            'type',
+            'title',
+            'errors',
+        ));
+        $this->assertResponsePropertyExists($response, 'errors.nickname');
+        $this->assertResponsePropertyEquals($response, 'errors.nickname', 'Please enter a clever nickname');
+        $this->assertResponsePropertyDoesNotExist($response, 'errors.avatarNumber');
+    }
 }
