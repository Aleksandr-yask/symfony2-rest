diff --git a/app/config/services.yml b/app/config/services.yml
index dd7aeb7..4167cf2 100644
--- a/app/config/services.yml
+++ b/app/config/services.yml
@@ -22,3 +22,7 @@ services:
         arguments: ['%kernel.debug%']
         tags:
             - { name: kernel.event_subscriber }
+
+    pagination_factor:
+        class: AppBundle\Pagination\PaginationFactory
+        arguments: ['@router']
diff --git a/src/AppBundle/Controller/Api/ProgrammerController.php b/src/AppBundle/Controller/Api/ProgrammerController.php
index 26dbaed..7452cc0 100644
--- a/src/AppBundle/Controller/Api/ProgrammerController.php
+++ b/src/AppBundle/Controller/Api/ProgrammerController.php
@@ -84,36 +84,8 @@ class ProgrammerController extends BaseController
         $qb = $this->getDoctrine()
             ->getRepository('AppBundle:Programmer')
             ->findAllQueryBuilder();
-        $adapter = new DoctrineORMAdapter($qb);
-        $pagerfanta = new Pagerfanta($adapter);
-        $pagerfanta->setMaxPerPage(10);
-        $pagerfanta->setCurrentPage($page);
-
-        $programmers = [];
-        foreach ($pagerfanta->getCurrentPageResults() as $result) {
-            $programmers[] = $result;
-        }
-
-        $paginatedCollection = new PaginatedCollection($programmers, $pagerfanta->getNbResults());
-
-        $route = 'api_programmers_collection';
-        $routeParams = array();
-        $createLinkUrl = function($targetPage) use ($route, $routeParams) {
-            return $this->generateUrl($route, array_merge(
-                $routeParams,
-                array('page' => $targetPage)
-            ));
-        };
-
-        $paginatedCollection->addLink('self', $createLinkUrl($page));
-        $paginatedCollection->addLink('first', $createLinkUrl(1));
-        $paginatedCollection->addLink('last', $createLinkUrl($pagerfanta->getNbPages()));
-        if ($pagerfanta->hasNextPage()) {
-            $paginatedCollection->addLink('next', $createLinkUrl($pagerfanta->getNextPage()));
-        }
-        if ($pagerfanta->hasPreviousPage()) {
-            $paginatedCollection->addLink('prev', $createLinkUrl($pagerfanta->getPreviousPage()));
-        }
+        $paginatedCollection = $this->get('pagination_factor')
+            ->createCollection($qb, $page, 'api_programmers_collection');
 
         $response = $this->createApiResponse($paginatedCollection, 200);
 
diff --git a/src/AppBundle/Pagination/PaginationFactory.php b/src/AppBundle/Pagination/PaginationFactory.php
new file mode 100644
index 0000000..b9cef74
--- /dev/null
+++ b/src/AppBundle/Pagination/PaginationFactory.php
@@ -0,0 +1,52 @@
+<?php
+
+namespace AppBundle\Pagination;
+
+use Doctrine\ORM\QueryBuilder;
+use Pagerfanta\Adapter\DoctrineORMAdapter;
+use Pagerfanta\Pagerfanta;
+use Symfony\Component\Routing\RouterInterface;
+
+class PaginationFactory
+{
+    private $router;
+
+    public function __construct(RouterInterface $router)
+    {
+        $this->router = $router;
+    }
+
+    public function createCollection(QueryBuilder $qb, $page, $route, array $routeParams = array())
+    {
+        $adapter = new DoctrineORMAdapter($qb);
+        $pagerfanta = new Pagerfanta($adapter);
+        $pagerfanta->setMaxPerPage(10);
+        $pagerfanta->setCurrentPage($page);
+
+        $programmers = [];
+        foreach ($pagerfanta->getCurrentPageResults() as $result) {
+            $programmers[] = $result;
+        }
+
+        $paginatedCollection = new PaginatedCollection($programmers, $pagerfanta->getNbResults());
+
+        $createLinkUrl = function($targetPage) use ($route, $routeParams) {
+            return $this->router->generate($route, array_merge(
+                $routeParams,
+                array('page' => $targetPage)
+            ));
+        };
+
+        $paginatedCollection->addLink('self', $createLinkUrl($page));
+        $paginatedCollection->addLink('first', $createLinkUrl(1));
+        $paginatedCollection->addLink('last', $createLinkUrl($pagerfanta->getNbPages()));
+        if ($pagerfanta->hasNextPage()) {
+            $paginatedCollection->addLink('next', $createLinkUrl($pagerfanta->getNextPage()));
+        }
+        if ($pagerfanta->hasPreviousPage()) {
+            $paginatedCollection->addLink('prev', $createLinkUrl($pagerfanta->getPreviousPage()));
+        }
+
+        return $paginatedCollection;
+    }
+}
\ No newline at end of file
